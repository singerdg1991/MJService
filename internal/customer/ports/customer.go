package ports

import (
	"time"

	"github.com/hoitek/Kit/restypes"
	"github.com/hoitek/Maja-Service/internal/_shared/types"
	"github.com/hoitek/Maja-Service/internal/customer/domain"
	"github.com/hoitek/Maja-Service/internal/customer/models"
)

type CustomerService interface {
	CreatePersonalInfo(payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	Query(dataModel *models.CustomersQueryRequestParams) (*restypes.QueryResponse, error)
	UpdateUserInformation(customerID int64, payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	UpdateAdditionalInfo(payload *models.CustomersUpdateAdditionalInfoRequestBody) (*domain.Customer, error)
	FindByID(id int) (*domain.Customer, error)
	CreateCreditDetails(payload *models.CustomersCreateCreditDetailsRequestBody) (*domain.CustomerCreditDetail, error)
	QueryCreditDetails(q *models.CustomersQueryCreditDetailsRequestParams) (*restypes.QueryResponse, error)
	DeleteCustomerCreditDetails(payload *models.CustomersDeleteCreditDetailsRequestBody) ([]int64, error)
	FindCreditDetailsByID(id int) (*domain.CustomerCreditDetail, error)
	FindCreditDetailsByIDAndCustomerID(id int, customerId int) (*domain.CustomerCreditDetail, error)
	UpdateCustomerCreditDetails(payload *models.CustomersUpdateCreditDetailsRequestBody) (*domain.CustomerCreditDetail, error)
	CreateAbsences(customer *domain.Customer, payload *models.CustomersCreateAbsencesRequestBody) (*domain.CustomerAbsence, error)
	QueryAbsences(queries *models.CustomersQueryAbsencesRequestParams) (*restypes.QueryResponse, error)
	FindCustomerAbsenceByID(id int) (*domain.CustomerAbsence, error)
	UpdateAbsence(customerAbsence *domain.CustomerAbsence, payload *models.CustomersUpdateAbsenceRequestBody) (*domain.CustomerAbsence, error)
	DeleteAbsences(payload *models.CustomersDeleteAbsencesRequestBody) ([]int64, error)
	CreateServices(customer *domain.Customer, payload *models.CustomersCreateServicesRequestBody) (*domain.CustomerServices, error)
	QueryServices(queries *models.CustomersQueryServicesRequestParams) (*restypes.QueryResponse, error)
	FindCustomerServiceByID(id int) (*domain.CustomerServices, error)
	FindCustomerServiceByIDAndCustomerID(id int, customerId int) (*domain.CustomerServices, error)
	UpdateService(customerService *domain.CustomerServices, payload *models.CustomersCreateServicesRequestBody) (*domain.CustomerServices, error)
	DeleteServices(payload *models.CustomersDeleteServicesRequestBody) ([]int64, error)
	QueryMedicines(queries *models.CustomersQueryMedicinesRequestParams) (*restypes.QueryResponse, error)
	CreateMedicines(customer *domain.Customer, payload *models.CustomersCreateMedicinesRequestBody) (*domain.CustomerMedicine, error)
	FindCustomerMedicineByIDAndCustomerID(id int, customerId int) (*domain.CustomerMedicine, error)
	UpdateMedicine(customerMedicine *domain.CustomerMedicine, payload *models.CustomersUpdateMedicinesRequestBody) (*domain.CustomerMedicine, error)
	DeleteMedicines(payload *models.CustomersDeleteMedicinesRequestBody) ([]int64, error)
	UpdatePersonalInfo(customerId int64, payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	CreateOtherAttachments(customer *domain.Customer, payload *models.CustomersCreateOtherAttachmentsRequestBody) (*domain.CustomerOtherAttachment, error)
	UpdateCustomerOtherAttachments(attachments []*types.UploadMetadata, id int64) (*domain.CustomerOtherAttachment, error)
	QueryOtherAttachments(dataModel *models.CustomersQueryOtherAttachmentsRequestParams) (*restypes.QueryResponse, error)
	FindCustomerOtherAttachmentByID(id int) (*domain.CustomerOtherAttachment, error)
	UpdateCustomerOtherAttachment(customerOtherAttachment *domain.CustomerOtherAttachment, payload *models.CustomersUpdateOtherAttachmentRequestBody) (*domain.CustomerOtherAttachment, error)
	DeleteCustomerOtherAttachments(payload *models.CustomersDeleteOtherAttachmentsRequestBody) (*restypes.DeleteResponse, error)
	CreateRelatives(customer *domain.Customer, payload *models.CustomersCreateRelativesRequestBody) (*domain.CustomerRelative, error)
	QueryRelatives(queries *models.CustomersQueryRelativesRequestParams) (*restypes.QueryResponse, error)
	FindCustomerRelativeByID(id int) (*domain.CustomerRelative, error)
	UpdateRelative(customerRelative *domain.CustomerRelative, payload *models.CustomersCreateRelativesRequestBody) (*domain.CustomerRelative, error)
	DeleteRelatives(payload *models.CustomersDeleteRelativesRequestBody) ([]int64, error)
	QueryContractualMobilityRestrictionLogs(queries *models.CustomersQueryContractualMobilityRestrictionLogsRequestParams) (*restypes.QueryResponse, error)
	FindCustomerContractualMobilityRestrictionLogByID(id int) (*domain.CustomerContractualMobilityRestrictionLog, error)
	UpdateAbsenceAttachments(previousAttachments []types.UploadMetadata, attachments []*types.UploadMetadata, id int64) (*domain.CustomerAbsence, error)
	UpdateMedicineAttachments(previousAttachments []types.UploadMetadata, attachments []*types.UploadMetadata, id int64) (*domain.CustomerMedicine, error)
	QueryStatusLogs(queries *models.CustomersQueryStatusLogsRequestParams) (*restypes.QueryResponse, error)
	FindCustomerStatusLogByID(id int) (*domain.CustomerStatusLog, error)
	FindCustomerServicesForSpecificShift(cyclePickupShiftID int64, date time.Time, shiftName string, shiftMorningStartHour int64, shiftMorningEndHour int64, shiftEveningStartHour int64, shiftEveningEndHour int64, shiftNightStartHour int64, shiftNightEndHour int64) ([]*domain.CustomerServices, error)
}

type CustomerRepositoryPostgresDB interface {
	CreatePersonalInfo(payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	Query(dataModel *models.CustomersQueryRequestParams) ([]*domain.Customer, error)
	Count(dataModel *models.CustomersQueryRequestParams) (int64, error)
	UpdateUserInformation(customerID int64, payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	UpdateAdditionalInfo(payload *models.CustomersUpdateAdditionalInfoRequestBody) (*domain.Customer, error)
	CreateCreditDetails(payload *models.CustomersCreateCreditDetailsRequestBody) (*domain.CustomerCreditDetail, error)
	QueryCreditDetails(queries *models.CustomersQueryCreditDetailsRequestParams) ([]*domain.CustomerCreditDetail, error)
	CountCreditDetails(dataModel *models.CustomersQueryCreditDetailsRequestParams) (int64, error)
	DeleteCustomerCreditDetails(payload *models.CustomersDeleteCreditDetailsRequestBody) ([]int64, error)
	UpdateCustomerCreditDetails(payload *models.CustomersUpdateCreditDetailsRequestBody) (*domain.CustomerCreditDetail, error)
	CreateAbsences(customer *domain.Customer, payload *models.CustomersCreateAbsencesRequestBody) (*domain.CustomerAbsence, error)
	QueryAbsences(queries *models.CustomersQueryAbsencesRequestParams) ([]*domain.CustomerAbsence, error)
	CountAbsences(queries *models.CustomersQueryAbsencesRequestParams) (int64, error)
	UpdateAbsence(customerAbsence *domain.CustomerAbsence, payload *models.CustomersUpdateAbsenceRequestBody) (*domain.CustomerAbsence, error)
	DeleteAbsences(payload *models.CustomersDeleteAbsencesRequestBody) ([]int64, error)
	CreateServices(customer *domain.Customer, payload *models.CustomersCreateServicesRequestBody) (*domain.CustomerServices, error)
	QueryServices(queries *models.CustomersQueryServicesRequestParams) ([]*domain.CustomerServices, error)
	CountServices(queries *models.CustomersQueryServicesRequestParams) (int64, error)
	UpdateService(customerService *domain.CustomerServices, payload *models.CustomersCreateServicesRequestBody) (*domain.CustomerServices, error)
	DeleteServices(payload *models.CustomersDeleteServicesRequestBody) ([]int64, error)
	QueryMedicines(queries *models.CustomersQueryMedicinesRequestParams) ([]*domain.CustomerMedicine, error)
	CountMedicines(queries *models.CustomersQueryMedicinesRequestParams) (int64, error)
	CreateMedicines(customer *domain.Customer, payload *models.CustomersCreateMedicinesRequestBody) (*domain.CustomerMedicine, error)
	UpdateMedicine(customerMedicine *domain.CustomerMedicine, payload *models.CustomersUpdateMedicinesRequestBody) (*domain.CustomerMedicine, error)
	DeleteMedicines(payload *models.CustomersDeleteMedicinesRequestBody) ([]int64, error)
	UpdatePersonalInfo(customerId int64, payload *models.CustomersCreatePersonalInfoRequestBody) (*domain.Customer, error)
	CreateOtherAttachments(customer *domain.Customer, payload *models.CustomersCreateOtherAttachmentsRequestBody) (*domain.CustomerOtherAttachment, error)
	UpdateCustomerOtherAttachments(attachments []*types.UploadMetadata, id int64) (*domain.CustomerOtherAttachment, error)
	QueryOtherAttachments(dataModel *models.CustomersQueryOtherAttachmentsRequestParams) ([]*domain.CustomerOtherAttachment, int64, error)
	UpdateCustomerOtherAttachment(customerOtherAttachment *domain.CustomerOtherAttachment, payload *models.CustomersUpdateOtherAttachmentRequestBody) (*domain.CustomerOtherAttachment, error)
	DeleteCustomerOtherAttachments(payload *models.CustomersDeleteOtherAttachmentsRequestBody) ([]int64, error)
	CreateRelatives(customer *domain.Customer, payload *models.CustomersCreateRelativesRequestBody) (*domain.CustomerRelative, error)
	QueryRelatives(queries *models.CustomersQueryRelativesRequestParams) ([]*domain.CustomerRelative, error)
	CountRelatives(queries *models.CustomersQueryRelativesRequestParams) (int64, error)
	UpdateRelative(customerRelative *domain.CustomerRelative, payload *models.CustomersCreateRelativesRequestBody) (*domain.CustomerRelative, error)
	DeleteRelatives(payload *models.CustomersDeleteRelativesRequestBody) ([]int64, error)
	QueryContractualMobilityRestrictionLogs(queries *models.CustomersQueryContractualMobilityRestrictionLogsRequestParams) ([]*domain.CustomerContractualMobilityRestrictionLog, error)
	CountContractualMobilityRestrictionLogs(queries *models.CustomersQueryContractualMobilityRestrictionLogsRequestParams) (int64, error)
	UpdateAbsenceAttachments(previousAttachments []types.UploadMetadata, attachments []*types.UploadMetadata, id int64) (*domain.CustomerAbsence, error)
	UpdateMedicineAttachments(previousAttachments []types.UploadMetadata, attachments []*types.UploadMetadata, id int64) (*domain.CustomerMedicine, error)
	QueryStatusLogs(queries *models.CustomersQueryStatusLogsRequestParams) ([]*domain.CustomerStatusLog, error)
	CountStatusLogs(queries *models.CustomersQueryStatusLogsRequestParams) (int64, error)
	FindCustomerServicesForSpecificShift(cyclePickupShiftID int64, date time.Time, shiftName string, shiftMorningStartHour int64, shiftMorningEndHour int64, shiftEveningStartHour int64, shiftEveningEndHour int64, shiftNightStartHour int64, shiftNightEndHour int64) ([]*domain.CustomerServices, error)
}

type CustomerRepositoryMongoDB interface {
	Query(queries *models.CustomersQueryRequestParams) ([]*domain.Customer, error)
	Count(queries *models.CustomersQueryRequestParams) (int64, error)
	Create(postgresID int, payload interface{}) (interface{}, error)
	CreateOrUpdate(postgresID int, payload interface{}) (interface{}, error)
	CreateEmptyForUserID(payload interface{}) (interface{}, error)
	UpdateByPostgresID(postgresID int, payload interface{}) (interface{}, error)
	UpdateUserInfo(userID int, payload interface{}) (interface{}, error)
	Update(payload interface{}, id int) error
	Delete(ids []uint) error
}
